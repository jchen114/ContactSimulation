// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sample.proto

#ifndef PROTOBUF_Sample_2eproto__INCLUDED
#define PROTOBUF_Sample_2eproto__INCLUDED

#include <string>
// EDITS include
#include "State.h"
#include "Action.h"
#include "Reward.h"
#include <algorithm>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Sample_2eproto();
void protobuf_AssignDesc_Sample_2eproto();
void protobuf_ShutdownFile_Sample_2eproto();

class Sample;
class Sample_Vector;

// ===================================================================

class Sample_Vector : public ::google::protobuf::Message {
 public:
  Sample_Vector();
  virtual ~Sample_Vector();

  Sample_Vector(const Sample_Vector& from);

  inline Sample_Vector& operator=(const Sample_Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sample_Vector& default_instance();

  void Swap(Sample_Vector* other);

  // implements Message ----------------------------------------------

  Sample_Vector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sample_Vector& from);
  void MergeFrom(const Sample_Vector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Sample.Vector)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_Sample_2eproto();
  friend void protobuf_AssignDesc_Sample_2eproto();
  friend void protobuf_ShutdownFile_Sample_2eproto();

  void InitAsDefaultInstance();
  static Sample_Vector* default_instance_;
};
// -------------------------------------------------------------------

class Sample : public ::google::protobuf::Message {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);

  // EDITS:
  Sample(State s, Action a, Reward r, State s_n) {

	  // Store s
	  std::vector<std::tuple<float,float>> state = s.GetContactState();
	  std::for_each(state.begin(), state.end(), [this](std::tuple<float,float> force) {
		  Sample_Vector *sv = add_currentstate();
		  sv->set_x(std::get<0>(force));
		  sv->set_y(std::get<1>(force));
	  });
	  // Store a
	  set_action(a.GetAction());
	  // Store r
	  set_reward(r.GetReward());
	  // Store s_n
	  state = s_n.GetContactState();
	  std::for_each(state.begin(), state.end(), [this](std::tuple<float, float> force) {
		  Sample_Vector *sv = add_nextstate();
		  sv->set_x(std::get<0>(force));
		  sv->set_y(std::get<1>(force));
	  });

  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sample& default_instance();

  void Swap(Sample* other);

  // implements Message ----------------------------------------------

  Sample* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Sample_Vector Vector;

  // accessors -------------------------------------------------------

  // repeated .Sample.Vector CurrentState = 1;
  inline int currentstate_size() const;
  inline void clear_currentstate();
  static const int kCurrentStateFieldNumber = 1;
  inline const ::Sample_Vector& currentstate(int index) const;
  inline ::Sample_Vector* mutable_currentstate(int index);
  inline ::Sample_Vector* add_currentstate();
  inline const ::google::protobuf::RepeatedPtrField< ::Sample_Vector >&
      currentstate() const;
  inline ::google::protobuf::RepeatedPtrField< ::Sample_Vector >*
      mutable_currentstate();

  // required int32 Action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // required float Reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline float reward() const;
  inline void set_reward(float value);

  // repeated .Sample.Vector NextState = 4;
  inline int nextstate_size() const;
  inline void clear_nextstate();
  static const int kNextStateFieldNumber = 4;
  inline const ::Sample_Vector& nextstate(int index) const;
  inline ::Sample_Vector* mutable_nextstate(int index);
  inline ::Sample_Vector* add_nextstate();
  inline const ::google::protobuf::RepeatedPtrField< ::Sample_Vector >&
      nextstate() const;
  inline ::google::protobuf::RepeatedPtrField< ::Sample_Vector >*
      mutable_nextstate();

  // @@protoc_insertion_point(class_scope:Sample)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Sample_Vector > currentstate_;
  ::google::protobuf::int32 action_;
  float reward_;
  ::google::protobuf::RepeatedPtrField< ::Sample_Vector > nextstate_;
  friend void  protobuf_AddDesc_Sample_2eproto();
  friend void protobuf_AssignDesc_Sample_2eproto();
  friend void protobuf_ShutdownFile_Sample_2eproto();

  void InitAsDefaultInstance();
  static Sample* default_instance_;
};
// ===================================================================


// ===================================================================

// Sample_Vector

// required float X = 1;
inline bool Sample_Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sample_Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sample_Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sample_Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Sample_Vector::x() const {
  // @@protoc_insertion_point(field_get:Sample.Vector.X)
  return x_;
}
inline void Sample_Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Sample.Vector.X)
}

// required float Y = 2;
inline bool Sample_Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sample_Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sample_Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sample_Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Sample_Vector::y() const {
  // @@protoc_insertion_point(field_get:Sample.Vector.Y)
  return y_;
}
inline void Sample_Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Sample.Vector.Y)
}

// -------------------------------------------------------------------

// Sample

// repeated .Sample.Vector CurrentState = 1;
inline int Sample::currentstate_size() const {
  return currentstate_.size();
}
inline void Sample::clear_currentstate() {
  currentstate_.Clear();
}
inline const ::Sample_Vector& Sample::currentstate(int index) const {
  // @@protoc_insertion_point(field_get:Sample.CurrentState)
  return currentstate_.Get(index);
}
inline ::Sample_Vector* Sample::mutable_currentstate(int index) {
  // @@protoc_insertion_point(field_mutable:Sample.CurrentState)
  return currentstate_.Mutable(index);
}
inline ::Sample_Vector* Sample::add_currentstate() {
  // @@protoc_insertion_point(field_add:Sample.CurrentState)
  return currentstate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sample_Vector >&
Sample::currentstate() const {
  // @@protoc_insertion_point(field_list:Sample.CurrentState)
  return currentstate_;
}
inline ::google::protobuf::RepeatedPtrField< ::Sample_Vector >*
Sample::mutable_currentstate() {
  // @@protoc_insertion_point(field_mutable_list:Sample.CurrentState)
  return &currentstate_;
}

// required int32 Action = 2;
inline bool Sample::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sample::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sample::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sample::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 Sample::action() const {
  // @@protoc_insertion_point(field_get:Sample.Action)
  return action_;
}
inline void Sample::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:Sample.Action)
}

// required float Reward = 3;
inline bool Sample::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sample::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sample::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sample::clear_reward() {
  reward_ = 0;
  clear_has_reward();
}
inline float Sample::reward() const {
  // @@protoc_insertion_point(field_get:Sample.Reward)
  return reward_;
}
inline void Sample::set_reward(float value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:Sample.Reward)
}

// repeated .Sample.Vector NextState = 4;
inline int Sample::nextstate_size() const {
  return nextstate_.size();
}
inline void Sample::clear_nextstate() {
  nextstate_.Clear();
}
inline const ::Sample_Vector& Sample::nextstate(int index) const {
  // @@protoc_insertion_point(field_get:Sample.NextState)
  return nextstate_.Get(index);
}
inline ::Sample_Vector* Sample::mutable_nextstate(int index) {
  // @@protoc_insertion_point(field_mutable:Sample.NextState)
  return nextstate_.Mutable(index);
}
inline ::Sample_Vector* Sample::add_nextstate() {
  // @@protoc_insertion_point(field_add:Sample.NextState)
  return nextstate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sample_Vector >&
Sample::nextstate() const {
  // @@protoc_insertion_point(field_list:Sample.NextState)
  return nextstate_;
}
inline ::google::protobuf::RepeatedPtrField< ::Sample_Vector >*
Sample::mutable_nextstate() {
  // @@protoc_insertion_point(field_mutable_list:Sample.NextState)
  return &nextstate_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Sample_2eproto__INCLUDED
